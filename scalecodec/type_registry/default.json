{
  "types": {
    "(AccountId, Balance)": {
      "type": "struct",
      "type_mapping": [
         ["account", "AccountId"],
         ["balance", "Balance"]
      ]
    },
    "AccountData": {
      "type": "struct",
      "type_mapping": [
          ["free", "Balance"],
          ["reserved", "Balance"],
          ["miscFrozen", "Balance"],
          ["feeFrozen", "Balance"]
      ]
    },
    "BlockNumber": "U64",
    "CandidateReceipt": {
      "type": "struct",
      "type_mapping": [
          ["parachainIndex", "ParaId"],
          ["collator", "AccountId"],
          ["signature", "CollatorSignature"],
          ["headData", "HeadData"],
          ["balanceUploads", "Vec<BalanceUpload>"],
          ["egressQueueRoots", "Vec<EgressQueueRoot>"],
          ["fees", "u64"],
          ["blockDataHash", "Hash"]
      ]
    },
    "AttestedCandidate": {
      "type": "struct",
      "type_mapping": [
         ["candidate", "CandidateReceipt"],
         ["validityVotes", "Vec<ValidityVote>"]
      ]
    },
    "LockIdentifier": "[u8; 8]",
    "BalanceLock": {
      "type": "struct",
      "type_mapping": [
         ["id", "LockIdentifier"],
         ["amount", "Balance"],
         ["until", "BlockNumber"],
         ["reasons", "WithdrawReasons"]
      ]
    },
    "FullIdentification": {
      "type": "struct",
      "type_mapping": [
         ["total", "Compact<Balance>"],
         ["own", "Compact<Balance>"],
         ["others", "Vec<IndividualExposure>"]
      ]
    },
    "IdentificationTuple": {
      "type": "struct",
      "type_mapping": [
         ["validatorId", "ValidatorId"],
         ["exposure", "FullIdentification"]
      ]
    },
    "SetId": "U64",
    "Reasons": {
      "type": "enum",
      "value_list": [
        "Fee",
        "Misc",
        "All"
      ]
    },
    "RoundNumber": "U64",
    "SessionIndex": "U32",
    "AuctionIndex": "U32",
    "AuthIndex": "U32",
    "AuthorityIndex": "u64",
    "Signature": "H512",
    "CollatorSignature": "Signature",
    "AuthorityWeight": "u64",
    "NextAuthority": {
      "type": "struct",
      "type_mapping": [
         ["AuthorityId", "AuthorityId"],
         ["weight", "AuthorityWeight"]
      ]
    },
    "AuthorityList": "VecNextAuthority",
    "BalanceUpload": "(AccountId, u64)",
    "CollatorId": "H256",
    "ContractInfo": {
      "type": "enum",
      "value_list": [
        "Alive",
        "Tombstone"
      ]
    },
    "TrieId": "Vec<u8>",
    "RawAliveContractInfo": {
      "type": "struct",
      "type_mapping": [
         ["trie_id", "TrieId"],
         ["storage_size", "u32"],
         ["code_hash", "CodeHash"],
         ["rent_allowance", "Balance"],
         ["deduct_block", "BlockNumber"],
         ["last_write", "Option<BlockNumber>"]
      ]
    },
    "DispatchClass": {
      "type": "enum",
      "value_list": [
        "Normal",
        "Operational"
      ]
    },
    "DispatchInfo": {
      "type": "struct",
      "type_mapping": [
         ["weight", "Weight"],
         ["class", "DispatchClass"],
         ["paysFee", "bool"]
      ]
    },
    "EgressQueueRoot": "(ParaId, Hash)",
    "EventIndex": "u32",
    "Extrinsic": "ExtrinsicsDecoder",
    "Gas": "u64",
    "IdentityFields": {
      "type": "set",
      "value_list": {
        "Display": 1,
        "Legal": 2,
        "Web": 4,
        "Riot":  8,
        "Email":  16,
        "PgpFingerprint":  32,
        "Image": 64,
        "Twitter": 128
      }
    },
    "IdentityInfoAdditional": {
      "type": "struct",
      "type_mapping": [
         ["field", "Data"],
         ["value", "Data"]
      ]
    },
    "IdentityInfo": {
      "type": "struct",
      "type_mapping": [
         ["additional", "Vec<IdentityInfoAdditional>"],
         ["display", "Data"],
         ["legal", "Data"],
         ["web", "Data"],
         ["riot", "Data"],
         ["email", "Data"],
         ["pgpFingerprint", "Option<H160>"],
         ["image", "Data"],
         ["twitter", "Data"]
      ]
    },
    "Judgement": {
      "type": "enum",
      "type_mapping": [
        ["Unknown", "Null"],
        ["FeePaid", "Balance"],
        ["Reasonable", "Null"],
        ["KnownGood", "Null"],
        ["OutOfDate", "Null"],
        ["LowQuality", "Null"],
        ["Erroneous", "Null"]
      ]
    },
    "Judgement<BalanceOf>": "Judgement",
    "LeasePeriod": "BlockNumber",
    "LeasePeriodOf": "LeasePeriod",
    "(LeasePeriodOf, IncomingParachain<AccountId, Hash>)": {
      "type": "struct",
      "type_mapping": [
         ["leasePeriod", "LeasePeriodOf"],
         ["incomingParachain", "IncomingParachain"]
      ]
    },
    "(ParaId, Option<(CollatorId, Retriable)>)": {
      "type": "struct",
      "type_mapping": [
         ["ParaId", "ParaId"],
         ["CollatorId-Retriable", "Option<(CollatorId, Retriable)>"]
      ]
    },
    "MaybeVrf": "[u8; 32]",
    "MemberCount": "u32",
    "MomentOf": "Moment",
    "MoreAttestations": "Null",
    "Multiplier": "u64",
    "Timepoint": {
      "type": "struct",
      "type_mapping": [
         ["height", "BlockNumber"],
         ["index", "u32"]
      ]
    },
    "Multisig": {
      "type": "struct",
      "type_mapping": [
         ["when", "Timepoint"],
         ["deposit", "Balance"],
         ["depositor", "AccountId"],
         ["approvals", "Vec<AccountId>"]
      ]
    },
    "Offender": {
      "type": "struct",
      "type_mapping": [
         ["validatorId", "ValidatorId"],
         ["exposure", "Exposure"]
      ]
    },
    "PhantomData": "Null",
    "sp_std::marker::PhantomData<(AccountId, Event)>": "PhantomData",
    "Reporter": "AccountId",
    "OffenceDetails<AccountId, IdentificationTuple>": {
      "type": "struct",
      "type_mapping": [
         ["offender", "Offender"],
         ["reporters", "Vec<Reporter>"]
      ]
    },
    "OpenTipFinder": "(AccountId, Balance)",
    "OpenTipTip": "(AccountId, Balance)",
    "OpenTip<AccountId, BalanceOf, BlockNumber, Hash>": {
      "type": "struct",
      "type_mapping": [
         ["reason", "Hash"],
         ["who", "AccountId"],
         ["finder", "Option<OpenTipFinder>"],
         ["closes", "Option<BlockNumber>"],
         ["tips", "Vec<OpenTipTip>"]
      ]
    },
    "ParaIdOf": "ParaId",
    "ParaScheduling": {
      "type": "enum",
      "value_list": [
        "Always",
        "Dynamic"
      ]
    },
    "ParaInfo": {
      "type": "struct",
      "type_mapping": [
         ["scheduling", "ParaScheduling"]
      ]
    },
    "Percent": "u8",
    "SlotNumber": "u64",
    "VrfData": "[u8; 32]",
    "VrfProof": "[u8; 64]",
    "RawAuraPreDigest": {
      "type": "struct",
      "type_mapping": [
         ["slotNumber", "SlotNumber"]
      ]
    },
    "RawBabePreDigest": {
      "type": "enum",
      "type_mapping": [
        ["value", "Null"],
        ["value", "RawBabePreDigestPrimary"],
        ["value", "RawBabePreDigestSecondary"]
      ]
    },
    "RawBabePreDigestPrimary": {
      "type": "struct",
      "type_mapping": [
         ["authorityIndex", "u32"],
         ["slotNumber", "SlotNumber"],
         ["vrfOutput", "VrfData"],
         ["vrfProof", "VrfProof"]
      ]
    },
    "RawBabePreDigestSecondary": {
      "type": "struct",
      "type_mapping": [
         ["authorityIndex", "u32"],
         ["slotNumber", "SlotNumber"]
      ]
    },
    "ReferendumInfo<BlockNumber, Proposal>": {
      "type": "struct",
      "type_mapping": [
         ["end", "BlockNumber"],
         ["proposal", "Proposal"],
         ["threshold", "VoteThreshold"],
         ["delay", "BlockNumber"]
      ]
    },
    "(ReferendumInfo<BlockNumber, Proposal>)": "ReferendumInfo<BlockNumber, Proposal>",
    "ReferendumInfo<BlockNumber, Hash>": {
      "type": "struct",
      "type_mapping": [
         ["end", "BlockNumber"],
         ["proposalHash", "Hash"],
         ["threshold", "VoteThreshold"],
         ["delay", "BlockNumber"]
      ]
    },
    "(ReferendumInfo<BlockNumber, Hash>)": "ReferendumInfo<BlockNumber, Hash>",
    "RegistrarIndex": "u32",
    "RegistrarInfo": {
      "type": "struct",
      "type_mapping": [
         ["account", "AccountId"],
         ["fee", "Balance"],
         ["fields", "IdentityFields"]
      ]
    },
    "Registration": {
      "type": "struct",
      "type_mapping": [
         ["judgements", "Vec<RegistrationJudgement>"],
         ["deposit", "Balance"],
         ["info", "IdentityInfo"]
      ]
    },
    "RegistrationJudgement": "(RegistrarIndex, Judgement)",
    "ReportIdOf": "Hash",
    "Schedule": {
      "type": "struct",
      "type_mapping": [
         ["version", "u32"],
         ["put_code_per_byte_cost", "Gas"],
         ["grow_mem_cost", "Gas"],
         ["regular_op_cost", "Gas"],
         ["return_data_per_byte_cost", "Gas"],
         ["event_data_per_byte_cost", "Gas"],
         ["event_per_topic_cost", "Gas"],
         ["event_base_cost", "Gas"],
         ["call_base_cost", "Gas"],
         ["instantiate_base_cost", "Gas"],
         ["sandbox_data_read_cost", "Gas"],
         ["sandbox_data_write_cost", "Gas"],
         ["max_event_topics", "u32"],
         ["max_stack_height", "u32"],
         ["max_memory_pages", "u32"],
         ["max_table_size", "u32"],
         ["enable_println", "bool"],
         ["max_subject_len", "u32"]
      ]
    },
    "StakingLedger<AccountId, BalanceOf>": {
      "type": "struct",
      "type_mapping": [
         ["stash", "AccountId"],
         ["total", "Compact<Balance>"],
         ["active", "Compact<Balance>"],
         ["unlocking", "Vec<UnlockChunk<Balance>>"]
      ]
    },
    "SubId": "u32",
    "UncleEntryItem<BlockNumber, Hash, AccountId>": {
      "type": "enum",
      "value_list": [
        "InclusionHeight",
        "Uncle"
      ]
    },
    "VestingSchedule<Balance, BlockNumber>": {
      "type": "struct",
      "type_mapping": [
         ["offset", "Balance"],
         ["perBlock", "Balance"],
         ["startingBlock", "BlockNumber"]
      ]
    },
    "Weight": "u32",
    "WeightMultiplier": "u64",
    "WinningDataEntry": "(AccountId, ParaIdOf, BalanceOf)",
    "WinningData": "Vec<WinningDataEntry>",
    "WithdrawReasons": {
      "type": "set",
      "value_list": {
        "TransactionPayment": 1,
        "Transfer": 2,
        "Reserve": 4,
        "Fee": 8,
        "Tip": 16
      }
    },
    "Index": "U32",
    "Kind": "[u8; 16]",
    "Nominations": {
      "type": "struct",
      "type_mapping": [
         ["targets", "Vec<AccountId>"],
         ["submittedIn", "EraIndex"],
         ["suppressed", "bool"]
      ]
    },
    "OpaqueTimeSlot": "Bytes",
    "Box<<T as Trait<I>>::Proposal>": "BoxProposal",
    "AuthoritySignature": "Signature",
    "<AuthorityId as RuntimeAppPublic>::Signature": "AuthoritySignature",
    "&[u8]": "Bytes",
    "Forcing": {
      "type": "enum",
      "value_list": [
        "NotForcing",
        "ForceNew",
        "ForceNone"
      ]
    },
    "Heartbeat": {
      "type": "struct",
      "type_mapping": [
         ["blockNumber", "BlockNumber"],
         ["networkState", "OpaqueNetworkState"],
         ["sessionIndex", "SessionIndex"],
         ["authorityIndex", "AuthIndex"]
      ]
    },
    "RewardDestination": {
      "type": "enum",
      "value_list": [
        "Staked",
        "Stash",
        "Controller"
      ]
    },
    "ChangesTrieConfiguration": {
      "type": "struct",
      "type_mapping": [
         ["digestInterval", "u32"],
         ["digestLevels", "u32"]
      ]
    },
    "ConsensusEngineId": "[u8; 4]",
    "DigestItem": {
      "type": "enum",
      "type_mapping": [
        ["Other", "Vec<u8>"],
        ["AuthoritiesChange", "Vec<AuthorityId>"],
        ["ChangesTrieRoot", "Hash"],
        ["SealV0", "SealV0"],
        ["Consensus", "Consensus"],
        ["Seal", "Seal"],
        ["PreRuntime", "PreRuntime"]
      ]
    },
    "Digest": {
      "type": "struct",
      "type_mapping": [
        ["logs", "Vec<DigestItem<Hash>>"]
      ]
    },
    "DigestOf": "Digest",
    "SpanIndex": "u32",
    "slashing::SpanIndex": "SpanIndex",
    "SlashingSpans": {
      "type": "struct",
      "type_mapping": [
         ["spanIndex", "SpanIndex"],
         ["lastStart", "EraIndex"],
         ["prior", "Vec<EraIndex>"]
      ]
    },
    "slashing::SlashingSpans": "SlashingSpans",
    "SpanRecord": {
      "type": "struct",
      "type_mapping": [
         ["slashed", "Balance"],
         ["paidOut", "Balance"]
      ]
    },
    "slashing::SpanRecord<BalanceOf>": "SpanRecord",
    "UnappliedSlashOther": {
      "type": "struct",
      "type_mapping": [
         ["account", "AccountId"],
         ["amount", "Balance"]
      ]
    },
    "UnappliedSlash<AccountId, BalanceOf>": {
      "type": "struct",
      "type_mapping": [
         ["validator", "AccountId"],
         ["own", "AccountId"],
         ["others", "Vec<UnappliedSlashOther>"],
         ["reporters", "Vec<AccountId>"],
         ["payout", "Balance"]
      ]
    },
    "Keys": "SessionKeysSubstrate",
    "Header": {
      "type": "struct",
      "type_mapping": [
        ["parent_hash", "H256"],
        ["number", "Compact<BlockNumber>"],
        ["state_root", "H256"],
        ["extrinsics_root", "H256"],
        ["digest", "Digest"]
      ]
    },
    "DispatchErrorModule": {
      "type": "struct",
      "type_mapping": [
         ["index", "u8"],
         ["error", "u8"]
      ]
    },
    "DispatchError": {
      "type": "enum",
      "type_mapping": [
        ["Other", "Null"],
        ["CannotLookup", "Null"],
        ["BadOrigin", "Null"],
        ["Module", "DispatchErrorModule"]
      ]
    },
    "DispatchResult": {
      "type": "enum",
      "type_mapping": [
        ["Ok", "Null"],
        ["Error", "DispatchError"]
      ]
    },
    "ActiveRecovery": {
      "type": "struct",
      "type_mapping": [
        ["created", "BlockNumber"],
        ["deposit", "Balance"],
        ["friends", "Vec<AccountId>"]
      ]
    },
    "RecoveryConfig": {
      "type": "struct",
      "type_mapping": [
        ["delayPeriod", "BlockNumber"],
        ["deposit", "Balance"],
        ["friends", "Vec<AccountId>"],
        ["threshold", "u16"]
      ]
    },
    "BidKindVouch": {
      "type": "struct",
      "type_mapping": [
        ["account", "AccountId"],
        ["amount", "Balance"]
      ]
    },
    "BidKind": {
      "type": "enum",
      "type_mapping": [
        ["Deposit", "Balance"],
        ["Vouch", "BidKindVouch"]
      ]
    },
    "Bid": {
      "type": "struct",
      "type_mapping": [
        ["who", "AccountId"],
        ["kind", "BidKind"],
        ["value", "Balance"]
      ]
    },
    "StrikeCount": "u32",
    "VouchingStatus": {
      "type": "enum",
      "value_list": [
        "Vouching",
        "Banned"
      ]
    },
    "ExtrinsicMetadata": {
      "type": "struct",
      "type_mapping": [
        ["version", "u8"],
        ["signedExtensions", "Vec<Bytes>"]
      ]
    }
  }
}
