{
  "types": {
    "polymesh_runtime_develop::runtime::Event": "*::Event",
    "polymesh_runtime_testnet::runtime::Event": "*::Event",
    "polymesh_runtime_mainnet::runtime::Event": "*::Event",
    "AccountInfo": "AccountInfoWithDualRefCount",
    "Address": "IndicesLookupSource",
    "LookupSource": "IndicesLookupSource",
    "CompactAssignments":  "CompactAssignmentsWith16",
    "RawSolution": "RawSolutionWith16",
    "ValidatorPrefsWithBlocked": {
      "type": "struct",
      "type_mapping": [
        [
          "commission",
          "Compact<Perbill>"
        ]
      ]
    },
    "IdentityId": "[u8; 32]",
    "EventDid": "IdentityId",
    "InvestorUid": "[u8; 16]",
    "Ticker": "[u8; 12]",
    "CddId": "[u8; 32]",
    "ScopeId": "[u8; 32]",
    "PosRatio": "(u32, u32)",
    "DocumentId": "u32",
    "DocumentName": "Text",
    "DocumentUri": "Text",
    "DocumentHash": {
      "type": "enum",
      "type_mapping": [
        [
          "None",
          ""
        ],
        [
          "H512",
          "[u8; 64]"
        ],
        [
          "H384",
          "[u8; 48]"
        ],
        [
          "H320",
          "[u8; 40]"
        ],
        [
          "H256",
          "[u8; 32]"
        ],
        [
          "H224",
          "[u8; 28]"
        ],
        [
          "H192",
          "[u8; 24]"
        ],
        [
          "H160",
          "[u8; 20]"
        ],
        [
          "H128",
          "[u8; 16]"
        ]
      ]
    },
    "DocumentType": "Text",
    "Document": {
      "type": "struct",
      "type_mapping": [
        [
          "uri",
          "DocumentUri"
        ],
        [
          "content_hash",
          "DocumentHash"
        ],
        [
          "name",
          "DocumentName"
        ],
        [
          "doc_type",
          "Option<DocumentType>"
        ],
        [
          "filing_date",
          "Option<Moment>"
        ]
      ]
    },
    "Version": "u8",
    "AssetType": {
      "type": "enum",
      "type_mapping": [
        [
          "EquityCommon",
          ""
        ],
        [
          "EquityPreferred",
          ""
        ],
        [
          "Commodity",
          ""
        ],
        [
          "FixedIncome",
          ""
        ],
        [
          "REIT",
          ""
        ],
        [
          "Fund",
          ""
        ],
        [
          "RevenueShareAgreement",
          ""
        ],
        [
          "StructuredProduct",
          ""
        ],
        [
          "Derivative",
          ""
        ],
        [
          "Custom",
          "Vec<u8>"
        ],
        [
          "StableCoin",
          ""
        ]
      ]
    },
    "AssetIdentifier": {
      "type": "enum",
      "type_mapping": [
        [
          "CUSIP",
          "[u8; 9]"
        ],
        [
          "CINS",
          "[u8; 9]"
        ],
        [
          "ISIN",
          "[u8; 12]"
        ],
        [
          "LEI",
          "[u8; 20]"
        ]
      ]
    },
    "AssetOwnershipRelation": {
      "type": "enum",
      "type_mapping": [
        [
          "NotOwned",
          ""
        ],
        [
          "TickerOwned",
          ""
        ],
        [
          "AssetOwned",
          ""
        ]
      ]
    },
    "AssetName": "Text",
    "FundingRoundName": "Text",
    "VenueDetails": "Text",
    "SecurityToken": {
      "type": "struct",
      "type_mapping": [
        [
          "name",
          "AssetName"
        ],
        [
          "total_supply",
          "Balance"
        ],
        [
          "owner_did",
          "IdentityId"
        ],
        [
          "divisible",
          "bool"
        ],
        [
          "asset_type",
          "AssetType"
        ],
        [
          "primary_issuance_agent",
          "Option<IdentityId>"
        ]
      ]
    },
    "PalletName": "Text",
    "DispatchableName": "Text",
    "PalletPermissions": {
      "type": "struct",
      "type_mapping": [
        [
          "pallet_name",
          "PalletName"
        ],
        [
          "dispatchable_names",
          "Option<Vec<DispatchableName>>"
        ]
      ]
    },
    "Permissions": {
      "type": "struct",
      "type_mapping": [
        [
          "asset",
          "Option<Vec<Ticker>>"
        ],
        [
          "extrinsic",
          "Option<Vec<PalletPermissions>>"
        ],
        [
          "portfolio",
          "Option<Vec<PortfolioId>>"
        ]
      ]
    },
    "LegacyPalletPermissions": {
      "type": "struct",
      "type_mapping": [
        [
          "pallet_name",
          "PalletName"
        ],
        [
          "total",
          "bool"
        ],
        [
          "dispatchable_names",
          "Vec<DispatchableName>"
        ]
      ]
    },
    "LegacyPermissions": {
      "type": "struct",
      "type_mapping": [
        [
          "asset",
          "Option<Vec<Ticker>>"
        ],
        [
          "extrinsic",
          "Option<Vec<LegacyPalletPermissions>>"
        ],
        [
          "portfolio",
          "Option<Vec<PortfolioId>>"
        ]
      ]
    },
    "Signatory": {
      "type": "enum",
      "type_mapping": [
        [
          "Identity",
          "IdentityId"
        ],
        [
          "Account",
          "AccountId"
        ]
      ]
    },
    "SecondaryKey": {
      "type": "struct",
      "type_mapping": [
        [
          "signer",
          "Signatory"
        ],
        [
          "permissions",
          "Permissions"
        ]
      ]
    },
    "SecondaryKeyWithAuth": {
      "type": "struct",
      "type_mapping": [
        [
          "secondary_key",
          "SecondaryKey"
        ],
        [
          "auth_signature",
          "Signature"
        ]
      ]
    },
    "IdentityRole": {
      "type": "enum",
      "value_list": [
        "Issuer",
        "SimpleTokenIssuer",
        "Validator",
        "ClaimIssuer",
        "Investor",
        "NodeRunner",
        "PM",
        "CDDAMLClaimIssuer",
        "AccreditedInvestorClaimIssuer",
        "VerifiedIdentityClaimIssuer"
      ]
    },
    "PreAuthorizedKeyInfo": {
      "type": "struct",
      "type_mapping": [
        [
          "target_id",
          "IdentityId"
        ],
        [
          "secondary_key",
          "SecondaryKey"
        ]
      ]
    },
    "DidRecord": {
      "type": "struct",
      "type_mapping": [
        [
          "primary_key",
          "AccountId"
        ],
        [
          "secondary_keys",
          "Vec<SecondaryKey>"
        ]
      ]
    },
    "KeyIdentityData": {
      "type": "struct",
      "type_mapping": [
        [
          "identity",
          "IdentityId"
        ],
        [
          "permissions",
          "Option<Permissions>"
        ]
      ]
    },
    "CountryCode": {
      "type": "enum",
      "value_list": [
        "AF",
        "AX",
        "AL",
        "DZ",
        "AS",
        "AD",
        "AO",
        "AI",
        "AQ",
        "AG",
        "AR",
        "AM",
        "AW",
        "AU",
        "AT",
        "AZ",
        "BS",
        "BH",
        "BD",
        "BB",
        "BY",
        "BE",
        "BZ",
        "BJ",
        "BM",
        "BT",
        "BO",
        "BA",
        "BW",
        "BV",
        "BR",
        "VG",
        "IO",
        "BN",
        "BG",
        "BF",
        "BI",
        "KH",
        "CM",
        "CA",
        "CV",
        "KY",
        "CF",
        "TD",
        "CL",
        "CN",
        "HK",
        "MO",
        "CX",
        "CC",
        "CO",
        "KM",
        "CG",
        "CD",
        "CK",
        "CR",
        "CI",
        "HR",
        "CU",
        "CY",
        "CZ",
        "DK",
        "DJ",
        "DM",
        "DO",
        "EC",
        "EG",
        "SV",
        "GQ",
        "ER",
        "EE",
        "ET",
        "FK",
        "FO",
        "FJ",
        "FI",
        "FR",
        "GF",
        "PF",
        "TF",
        "GA",
        "GM",
        "GE",
        "DE",
        "GH",
        "GI",
        "GR",
        "GL",
        "GD",
        "GP",
        "GU",
        "GT",
        "GG",
        "GN",
        "GW",
        "GY",
        "HT",
        "HM",
        "VA",
        "HN",
        "HU",
        "IS",
        "IN",
        "ID",
        "IR",
        "IQ",
        "IE",
        "IM",
        "IL",
        "IT",
        "JM",
        "JP",
        "JE",
        "JO",
        "KZ",
        "KE",
        "KI",
        "KP",
        "KR",
        "KW",
        "KG",
        "LA",
        "LV",
        "LB",
        "LS",
        "LR",
        "LY",
        "LI",
        "LT",
        "LU",
        "MK",
        "MG",
        "MW",
        "MY",
        "MV",
        "ML",
        "MT",
        "MH",
        "MQ",
        "MR",
        "MU",
        "YT",
        "MX",
        "FM",
        "MD",
        "MC",
        "MN",
        "ME",
        "MS",
        "MA",
        "MZ",
        "MM",
        "NA",
        "NR",
        "NP",
        "NL",
        "AN",
        "NC",
        "NZ",
        "NI",
        "NE",
        "NG",
        "NU",
        "NF",
        "MP",
        "NO",
        "OM",
        "PK",
        "PW",
        "PS",
        "PA",
        "PG",
        "PY",
        "PE",
        "PH",
        "PN",
        "PL",
        "PT",
        "PR",
        "QA",
        "RE",
        "RO",
        "RU",
        "RW",
        "BL",
        "SH",
        "KN",
        "LC",
        "MF",
        "PM",
        "VC",
        "WS",
        "SM",
        "ST",
        "SA",
        "SN",
        "RS",
        "SC",
        "SL",
        "SG",
        "SK",
        "SI",
        "SB",
        "SO",
        "ZA",
        "GS",
        "SS",
        "ES",
        "LK",
        "SD",
        "SR",
        "SJ",
        "SZ",
        "SE",
        "CH",
        "SY",
        "TW",
        "TJ",
        "TZ",
        "TH",
        "TL",
        "TG",
        "TK",
        "TO",
        "TT",
        "TN",
        "TR",
        "TM",
        "TC",
        "TV",
        "UG",
        "UA",
        "AE",
        "GB",
        "US",
        "UM",
        "UY",
        "UZ",
        "VU",
        "VE",
        "VN",
        "VI",
        "WF",
        "EH",
        "YE",
        "ZM",
        "ZW",
        "BQ",
        "CW",
        "SX"
      ]
    },
    "Scope": {
      "type": "enum",
      "type_mapping": [
        [
          "Identity",
          "IdentityId"
        ],
        [
          "Ticker",
          "Ticker"
        ],
        [
          "Custom",
          "Vec<u8>"
        ]
      ]
    },
    "InvestorZKProofData": "Signature",
    "Scalar": "[u8; 32]",
    "RistrettoPoint": "[u8; 32]",
    "ZkProofData": {
      "type": "struct",
      "type_mapping": [
        [
          "challenge_responses",
          "[Scalar; 2]"
        ],
        [
          "subtract_expressions_res",
          "RistrettoPoint"
        ],
        [
          "blinded_scope_did_hash",
          "RistrettoPoint"
        ]
      ]
    },
    "ScopeClaimProof": {
      "type": "struct",
      "type_mapping": [
        [
          "proof_scope_id_wellformed",
          "Signature"
        ],
        [
          "proof_scope_id_cdd_id_match",
          "ZkProofData"
        ],
        [
          "scope_id",
          "RistrettoPoint"
        ]
      ]
    },
    "Claim": {
      "type": "enum",
      "type_mapping": [
        [
          "Accredited",
          "Scope"
        ],
        [
          "Affiliate",
          "Scope"
        ],
        [
          "BuyLockup",
          "Scope"
        ],
        [
          "SellLockup",
          "Scope"
        ],
        [
          "CustomerDueDiligence",
          "CddId"
        ],
        [
          "KnowYourCustomer",
          "Scope"
        ],
        [
          "Jurisdiction",
          "(CountryCode, Scope)"
        ],
        [
          "Exempted",
          "Scope"
        ],
        [
          "Blocked",
          "Scope"
        ],
        [
          "InvestorUniqueness",
          "(Scope, ScopeId, CddId)"
        ],
        [
          "NoData",
          ""
        ],
        [
          "InvestorUniquenessV2",
          "(CddId)"
        ]
      ]
    },
    "ClaimType": {
      "type": "enum",
      "type_mapping": [
        [
          "Accredited",
          ""
        ],
        [
          "Affiliate",
          ""
        ],
        [
          "BuyLockup",
          ""
        ],
        [
          "SellLockup",
          ""
        ],
        [
          "CustomerDueDiligence",
          ""
        ],
        [
          "KnowYourCustomer",
          ""
        ],
        [
          "Jurisdiction",
          ""
        ],
        [
          "Exempted",
          ""
        ],
        [
          "Blocked",
          ""
        ],
        [
          "InvestorUniqueness",
          ""
        ],
        [
          "NoData",
          ""
        ],
        [
          "InvestorUniquenessV2",
          ""
        ]
      ]
    },
    "IdentityClaim": {
      "type": "struct",
      "type_mapping": [
        [
          "claim_issuer",
          "IdentityId"
        ],
        [
          "issuance_date",
          "Moment"
        ],
        [
          "last_update_date",
          "Moment"
        ],
        [
          "expiry",
          "Option<Moment>"
        ],
        [
          "claim",
          "Claim"
        ]
      ]
    },
    "IdentityClaimKey": {
      "type": "struct",
      "type_mapping": [
        [
          "id",
          "IdentityId"
        ],
        [
          "claim_type",
          "ClaimType"
        ]
      ]
    },
    "ComplianceRequirement": {
      "type": "struct",
      "type_mapping": [
        [
          "sender_conditions",
          "Vec<Condition>"
        ],
        [
          "receiver_conditions",
          "Vec<Condition>"
        ],
        [
          "id",
          "u32"
        ]
      ]
    },
    "ComplianceRequirementResult": {
      "type": "struct",
      "type_mapping": [
        [
          "sender_conditions",
          "Vec<ConditionResult>"
        ],
        [
          "receiver_conditions",
          "Vec<ConditionResult>"
        ],
        [
          "id",
          "u32"
        ],
        [
          "result",
          "bool"
        ]
      ]
    },
    "ConditionType": {
      "type": "enum",
      "type_mapping": [
        [
          "IsPresent",
          "Claim"
        ],
        [
          "IsAbsent",
          "Claim"
        ],
        [
          "IsAnyOf",
          "Vec<Claim>"
        ],
        [
          "IsNoneOf",
          "Vec<Claim>"
        ],
        [
          "IsIdentity",
          "TargetIdentity"
        ]
      ]
    },
    "TrustedFor": {
      "type": "enum",
      "type_mapping": [
        [
          "Any",
          ""
        ],
        [
          "Specific",
          "Vec<ClaimType>"
        ]
      ]
    },
    "TrustedIssuer": {
      "type": "struct",
      "type_mapping": [
        [
          "issuer",
          "IdentityId"
        ],
        [
          "trusted_for",
          "TrustedFor"
        ]
      ]
    },
    "Condition": {
      "type": "struct",
      "type_mapping": [
        [
          "condition_type",
          "ConditionType"
        ],
        [
          "issuers",
          "Vec<TrustedIssuer>"
        ]
      ]
    },
    "ConditionResult": {
      "type": "struct",
      "type_mapping": [
        [
          "condition",
          "Condition"
        ],
        [
          "result",
          "bool"
        ]
      ]
    },
    "SimpleTokenRecord": {
      "type": "struct",
      "type_mapping": [
        [
          "ticker",
          "Ticker"
        ],
        [
          "total_supply",
          "Balance"
        ],
        [
          "owner_did",
          "IdentityId"
        ]
      ]
    },
    "FeeOf": "Balance",
    "TargetIdAuthorization": {
      "type": "struct",
      "type_mapping": [
        [
          "target_id",
          "IdentityId"
        ],
        [
          "nonce",
          "u64"
        ],
        [
          "expires_at",
          "Moment"
        ]
      ]
    },
    "TickerRegistration": {
      "type": "struct",
      "type_mapping": [
        [
          "owner",
          "IdentityId"
        ],
        [
          "expiry",
          "Option<Moment>"
        ]
      ]
    },
    "TickerRegistrationConfig": {
      "type": "struct",
      "type_mapping": [
        [
          "max_ticker_length",
          "u8"
        ],
        [
          "registration_length",
          "Option<Moment>"
        ]
      ]
    },
    "ClassicTickerRegistration": {
      "type": "struct",
      "type_mapping": [
        [
          "eth_owner",
          "EthereumAddress"
        ],
        [
          "is_created",
          "bool"
        ]
      ]
    },
    "ClassicTickerImport": {
      "type": "struct",
      "type_mapping": [
        [
          "eth_owner",
          "EthereumAddress"
        ],
        [
          "ticker",
          "Ticker"
        ],
        [
          "is_contract",
          "bool"
        ],
        [
          "is_created",
          "bool"
        ]
      ]
    },
    "EthereumAddress": "[u8; 20]",
    "EcdsaSignature": "[u8; 65]",
    "MotionTitle": "Text",
    "MotionInfoLink": "Text",
    "ChoiceTitle": "Text",
    "Motion": {
      "type": "struct",
      "type_mapping": [
        [
          "title",
          "MotionTitle"
        ],
        [
          "info_link",
          "MotionInfoLink"
        ],
        [
          "choices",
          "Vec<ChoiceTitle>"
        ]
      ]
    },
    "BallotTitle": "Text",
    "BallotMeta": {
      "type": "struct",
      "type_mapping": [
        [
          "title",
          "BallotTitle"
        ],
        [
          "motions",
          "Vec<Motion>"
        ]
      ]
    },
    "BallotTimeRange": {
      "type": "struct",
      "type_mapping": [
        [
          "start",
          "Moment"
        ],
        [
          "end",
          "Moment"
        ]
      ]
    },
    "BallotVote": {
      "type": "struct",
      "type_mapping": [
        [
          "power",
          "Balance"
        ],
        [
          "fallback",
          "Option<u16>"
        ]
      ]
    },
    "MaybeBlock": {
      "type": "enum",
      "type_mapping": [
        [
          "Some",
          "BlockNumber"
        ],
        [
          "None",
          ""
        ]
      ]
    },
    "Url": "Text",
    "PipDescription": "Text",
    "PipsMetadata": {
      "type": "struct",
      "type_mapping": [
        [
          "id",
          "PipId"
        ],
        [
          "url",
          "Option<Url>"
        ],
        [
          "description",
          "Option<PipDescription>"
        ],
        [
          "created_at",
          "BlockNumber"
        ],
        [
          "transaction_version",
          "u32"
        ],
        [
          "expiry",
          "MaybeBlock"
        ]
      ]
    },
    "Proposer": {
      "type": "enum",
      "type_mapping": [
        [
          "Community",
          "AccountId"
        ],
        [
          "Committee",
          "Committee"
        ]
      ]
    },
    "Committee": {
      "type": "enum",
      "type_mapping": [
        [
          "Technical",
          ""
        ],
        [
          "Upgrade",
          ""
        ]
      ]
    },
    "SkippedCount": "u8",
    "SnapshottedPip": {
      "type": "struct",
      "type_mapping": [
        [
          "id",
          "PipId"
        ],
        [
          "weight",
          "(bool, Balance)"
        ]
      ]
    },
    "SnapshotId": "u32",
    "SnapshotMetadata": {
      "type": "struct",
      "type_mapping": [
        [
          "created_at",
          "BlockNumber"
        ],
        [
          "made_by",
          "AccountId"
        ],
        [
          "id",
          "SnapshotId"
        ]
      ]
    },
    "SnapshotResult": {
      "type": "enum",
      "type_mapping": [
        [
          "Approve",
          ""
        ],
        [
          "Reject",
          ""
        ],
        [
          "Skip",
          ""
        ]
      ]
    },
    "Beneficiary": {
      "type": "struct",
      "type_mapping": [
        [
          "id",
          "IdentityId"
        ],
        [
          "amount",
          "Balance"
        ]
      ]
    },
    "DepositInfo": {
      "type": "struct",
      "type_mapping": [
        [
          "owner",
          "AccountId"
        ],
        [
          "amount",
          "Balance"
        ]
      ]
    },
    "PolymeshVotes": {
      "type": "struct",
      "type_mapping": [
        [
          "index",
          "u32"
        ],
        [
          "ayes",
          "Vec<(IdentityId, Balance)>"
        ],
        [
          "nays",
          "Vec<(IdentityId, Balance)>"
        ],
        [
          "end",
          "BlockNumber"
        ],
        [
          "expiry",
          "MaybeBlock"
        ]
      ]
    },
    "PipId": "u32",
    "ProposalState": {
      "type": "enum",
      "value_list": [
        "Pending",
        "Rejected",
        "Scheduled",
        "Failed",
        "Executed",
        "Expired"
      ]
    },
    "Pip": {
      "type": "struct",
      "type_mapping": [
        [
          "id",
          "PipId"
        ],
        [
          "proposal",
          "Call"
        ],
        [
          "state",
          "ProposalState"
        ],
        [
          "proposer",
          "Proposer"
        ]
      ]
    },
    "ProposalData": {
      "type": "enum",
      "type_mapping": [
        [
          "Hash",
          "Hash"
        ],
        [
          "Proposal",
          "Vec<u8>"
        ]
      ]
    },
    "TickerTransferApproval": {
      "type": "struct",
      "type_mapping": [
        [
          "authorized_by",
          "IdentityId"
        ],
        [
          "next_ticker",
          "Option<Ticker>"
        ],
        [
          "previous_ticker",
          "Option<Ticker>"
        ]
      ]
    },
    "OffChainSignature": {
      "type": "enum",
      "type_mapping": [
        [
          "Ed25519",
          "H512"
        ],
        [
          "Sr25519",
          "H512"
        ],
        [
          "Ecdsa",
          "H512"
        ]
      ]
    },
    "Authorization": {
      "type": "struct",
      "type_mapping": [
        [
          "authorization_data",
          "AuthorizationData"
        ],
        [
          "authorized_by",
          "IdentityId"
        ],
        [
          "expiry",
          "Option<Moment>"
        ],
        [
          "auth_id",
          "u64"
        ]
      ]
    },
    "AuthorizationData": {
      "type": "enum",
      "type_mapping": [
        [
          "AttestPrimaryKeyRotation",
          "IdentityId"
        ],
        [
          "RotatePrimaryKey",
          "IdentityId"
        ],
        [
          "TransferTicker",
          "Ticker"
        ],
        [
          "TransferPrimaryIssuanceAgent",
          "Ticker"
        ],
        [
          "AddMultiSigSigner",
          "AccountId"
        ],
        [
          "TransferAssetOwnership",
          "Ticker"
        ],
        [
          "JoinIdentity",
          "Permissions"
        ],
        [
          "PortfolioCustody",
          "PortfolioId"
        ],
        [
          "Custom",
          "Ticker"
        ],
        [
          "NoData",
          ""
        ],
        [
          "TransferCorporateActionAgent",
          "Ticker"
        ]
      ]
    },
    "AuthIdentifier": {
      "type": "struct",
      "type_mapping": [
        [
          "signatory",
          "Signatory"
        ],
        [
          "auth_id",
          "u64"
        ]
      ]
    },
    "SmartExtensionType": {
      "type": "enum",
      "type_mapping": [
        [
          "TransferManager",
          ""
        ],
        [
          "Offerings",
          ""
        ],
        [
          "SmartWallet",
          ""
        ],
        [
          "Custom",
          "Vec<u8>"
        ]
      ]
    },
    "SmartExtensionName": "Text",
    "SmartExtension": {
      "type": "struct",
      "type_mapping": [
        [
          "extension_type",
          "SmartExtensionType"
        ],
        [
          "extension_name",
          "SmartExtensionName"
        ],
        [
          "extension_id",
          "AccountId"
        ],
        [
          "is_archive",
          "bool"
        ]
      ]
    },
    "MetaUrl": "Text",
    "MetaDescription": "Text",
    "MetaVersion": "u32",
    "ExtVersion": "u32",
    "TemplateMetadata": {
      "type": "struct",
      "type_mapping": [
        [
          "url",
          "Option<MetaUrl>"
        ],
        [
          "se_type",
          "SmartExtensionType"
        ],
        [
          "usage_fee",
          "Balance"
        ],
        [
          "description",
          "MetaDescription"
        ],
        [
          "version",
          "MetaVersion"
        ]
      ]
    },
    "TemplateDetails": {
      "type": "struct",
      "type_mapping": [
        [
          "instantiation_fee",
          "Balance"
        ],
        [
          "owner",
          "IdentityId"
        ],
        [
          "frozen",
          "bool"
        ]
      ]
    },
    "ProportionMatch": {
      "type": "enum",
      "value_list": [
        "AtLeast",
        "MoreThan"
      ]
    },
    "AuthorizationNonce": "u64",
    "Counter": "u64",
    "Percentage": "Permill",
    "TransferManager": {
      "type": "enum",
      "type_mapping": [
        [
          "CountTransferManager",
          "Counter"
        ],
        [
          "PercentageTransferManager",
          "Percentage"
        ]
      ]
    },
    "RestrictionResult": {
      "type": "enum",
      "value_list": [
        "Valid",
        "Invalid",
        "ForceValid"
      ]
    },
    "Memo": "[u8;32]",
    "IssueRecipient": {
      "type": "enum",
      "type_mapping": [
        [
          "Account",
          "AccountId"
        ],
        [
          "Identity",
          "IdentityId"
        ]
      ]
    },
    "BridgeTx": {
      "type": "struct",
      "type_mapping": [
        [
          "nonce",
          "u32"
        ],
        [
          "recipient",
          "AccountId"
        ],
        [
          "value",
          "Balance"
        ],
        [
          "tx_hash",
          "H256"
        ]
      ]
    },
    "PendingTx": {
      "type": "struct",
      "type_mapping": [
        [
          "did",
          "IdentityId"
        ],
        [
          "bridge_tx",
          "BridgeTx"
        ]
      ]
    },
    "AssetCompliance": {
      "type": "struct",
      "type_mapping": [
        [
          "is_paused",
          "bool"
        ],
        [
          "requirements",
          "Vec<ComplianceRequirement>"
        ]
      ]
    },
    "AssetComplianceResult": {
      "type": "struct",
      "type_mapping": [
        [
          "paused",
          "bool"
        ],
        [
          "requirements",
          "Vec<ComplianceRequirementResult>"
        ],
        [
          "result",
          "bool"
        ]
      ]
    },
    "Claim1stKey": {
      "type": "struct",
      "type_mapping": [
        [
          "target",
          "IdentityId"
        ],
        [
          "claim_type",
          "ClaimType"
        ]
      ]
    },
    "Claim2ndKey": {
      "type": "struct",
      "type_mapping": [
        [
          "issuer",
          "IdentityId"
        ],
        [
          "scope",
          "Option<Scope>"
        ]
      ]
    },
    "BatchAddClaimItem": {
      "type": "struct",
      "type_mapping": [
        [
          "target",
          "IdentityId"
        ],
        [
          "claim",
          "Claim"
        ],
        [
          "expiry",
          "Option<Moment>"
        ]
      ]
    },
    "BatchRevokeClaimItem": {
      "type": "struct",
      "type_mapping": [
        [
          "target",
          "IdentityId"
        ],
        [
          "claim",
          "Claim"
        ]
      ]
    },
    "InactiveMember": {
      "type": "struct",
      "type_mapping": [
        [
          "id",
          "IdentityId"
        ],
        [
          "deactivated_at",
          "Moment"
        ],
        [
          "expiry",
          "Option<Moment>"
        ]
      ]
    },
    "VotingResult": {
      "type": "struct",
      "type_mapping": [
        [
          "ayes_count",
          "u32"
        ],
        [
          "ayes_stake",
          "Balance"
        ],
        [
          "nays_count",
          "u32"
        ],
        [
          "nays_stake",
          "Balance"
        ]
      ]
    },
    "ProtocolOp": {
      "type": "enum",
      "value_list": [
        "AssetRegisterTicker",
        "AssetIssue",
        "AssetAddDocument",
        "AssetCreateAsset",
        "AssetCreateCheckpointSchedule",
        "DividendNew",
        "ComplianceManagerAddComplianceRequirement",
        "IdentityRegisterDid",
        "IdentityCddRegisterDid",
        "IdentityAddClaim",
        "IdentitySetPrimaryKey",
        "IdentityAddSecondaryKeysWithAuthorization",
        "PipsPropose",
        "VotingAddBallot",
        "ContractsPutCode",
        "BallotAttachBallot",
        "DistributionDistribute"
      ]
    },
    "CddStatus": {
      "type": "enum",
      "type_mapping": [
        [
          "Ok",
          "IdentityId"
        ],
        [
          "Err",
          "Vec<u8>"
        ]
      ]
    },
    "AssetDidResult": {
      "type": "enum",
      "type_mapping": [
        [
          "Ok",
          "IdentityId"
        ],
        [
          "Err",
          "Vec<u8>"
        ]
      ]
    },
    "DidRecordsSuccess": {
      "type": "struct",
      "type_mapping": [
        [
          "primary_key",
          "AccountId"
        ],
        [
          "secondary_key",
          "Vec<SecondaryKey>"
        ]
      ]
    },
    "DidRecords": {
      "type": "enum",
      "type_mapping": [
        [
          "Success",
          "DidRecordsSuccess"
        ],
        [
          "IdNotFound",
          "Vec<u8>"
        ]
      ]
    },
    "VoteCountProposalFound": {
      "type": "struct",
      "type_mapping": [
        [
          "ayes",
          "u64"
        ],
        [
          "nays",
          "u64"
        ]
      ]
    },
    "VoteCount": {
      "type": "enum",
      "type_mapping": [
        [
          "ProposalFound",
          "VoteCountProposalFound"
        ],
        [
          "ProposalNotFound",
          "Vec<u8>"
        ]
      ]
    },
    "Vote": "(bool, Balance)",
    "VoteByPip": {
      "type": "struct",
      "type_mapping": [
        [
          "pip",
          "PipId"
        ],
        [
          "vote",
          "Vote"
        ]
      ]
    },
    "BridgeTxDetail": {
      "type": "struct",
      "type_mapping": [
        [
          "amount",
          "Balance"
        ],
        [
          "status",
          "BridgeTxStatus"
        ],
        [
          "execution_block",
          "BlockNumber"
        ],
        [
          "tx_hash",
          "H256"
        ]
      ]
    },
    "BridgeTxStatus": {
      "type": "enum",
      "type_mapping": [
        [
          "Absent",
          ""
        ],
        [
          "Pending",
          "u8"
        ],
        [
          "Frozen",
          ""
        ],
        [
          "Timelocked",
          ""
        ],
        [
          "Handled",
          ""
        ]
      ]
    },
    "HandledTxStatus": {
      "type": "enum",
      "type_mapping": [
        [
          "Success",
          ""
        ],
        [
          "Error",
          "Text"
        ]
      ]
    },
    "CappedFee": "u64",
    "CanTransferResult": {
      "type": "enum",
      "type_mapping": [
        [
          "Ok",
          "u8"
        ],
        [
          "Err",
          "Vec<u8>"
        ]
      ]
    },
    "AuthorizationType": {
      "type": "enum",
      "type_mapping": [
        [
          "AttestPrimaryKeyRotation",
          ""
        ],
        [
          "RotatePrimaryKey",
          ""
        ],
        [
          "TransferTicker",
          ""
        ],
        [
          "TransferPrimaryIssuanceAgent",
          ""
        ],
        [
          "AddMultiSigSigner",
          ""
        ],
        [
          "TransferAssetOwnership",
          ""
        ],
        [
          "JoinIdentity",
          ""
        ],
        [
          "PortfolioCustody",
          ""
        ],
        [
          "Custom",
          ""
        ],
        [
          "NoData",
          ""
        ],
        [
          "TransferCorporateActionAgent",
          ""
        ]
      ]
    },
    "ProposalDetails": {
      "type": "struct",
      "type_mapping": [
        [
          "approvals",
          "u64"
        ],
        [
          "rejections",
          "u64"
        ],
        [
          "status",
          "ProposalStatus"
        ],
        [
          "expiry",
          "Option<Moment>"
        ],
        [
          "auto_close",
          "bool"
        ]
      ]
    },
    "ProposalStatus": {
      "type": "enum",
      "type_mapping": [
        [
          "Invalid",
          ""
        ],
        [
          "ActiveOrExpired",
          ""
        ],
        [
          "ExecutionSuccessful",
          ""
        ],
        [
          "ExecutionFailed",
          ""
        ],
        [
          "Rejected",
          ""
        ]
      ]
    },
    "DidStatus": {
      "type": "enum",
      "type_mapping": [
        [
          "Unknown",
          ""
        ],
        [
          "Exists",
          ""
        ],
        [
          "CddVerified",
          ""
        ]
      ]
    },
    "PortfolioName": "Text",
    "PortfolioNumber": "u64",
    "PortfolioKind": {
      "type": "enum",
      "type_mapping": [
        [
          "Default",
          ""
        ],
        [
          "User",
          "PortfolioNumber"
        ]
      ]
    },
    "PortfolioId": {
      "type": "struct",
      "type_mapping": [
        [
          "did",
          "IdentityId"
        ],
        [
          "kind",
          "PortfolioKind"
        ]
      ]
    },
    "ProverTickerKey": {
      "type": "struct",
      "type_mapping": [
        [
          "prover",
          "IdentityId"
        ],
        [
          "ticker",
          "Ticker"
        ]
      ]
    },
    "TickerRangeProof": {
      "type": "struct",
      "type_mapping": [
        [
          "initial_message",
          "[u8; 32]"
        ],
        [
          "final_response",
          "Vec<u8>"
        ],
        [
          "max_two_exp",
          "u32"
        ]
      ]
    },
    "Moment": "u64",
    "CalendarUnit": {
      "type": "enum",
      "value_list": [
        "Second",
        "Minute",
        "Hour",
        "Day",
        "Week",
        "Month",
        "Year"
      ]
    },
    "CalendarPeriod": {
      "type": "struct",
      "type_mapping": [
        [
          "unit",
          "CalendarUnit"
        ],
        [
          "amount",
          "u64"
        ]
      ]
    },
    "CheckpointSchedule": {
      "type": "struct",
      "type_mapping": [
        [
          "start",
          "Moment"
        ],
        [
          "period",
          "CalendarPeriod"
        ]
      ]
    },
    "CheckpointId": "u64",
    "ScheduleId": "u64",
    "StoredSchedule": {
      "type": "struct",
      "type_mapping": [
        [
          "schedule",
          "CheckpointSchedule"
        ],
        [
          "id",
          "ScheduleId"
        ],
        [
          "at",
          "Moment"
        ],
        [
          "remaining",
          "u32"
        ]
      ]
    },
    "ScheduleSpec": {
      "type": "struct",
      "type_mapping": [
        [
          "start",
          "Option<Moment>"
        ],
        [
          "period",
          "CalendarPeriod"
        ],
        [
          "remaining",
          "u32"
        ]
      ]
    },
    "InstructionStatus": {
      "type": "enum",
      "type_mapping": [
        [
          "Unknown",
          ""
        ],
        [
          "Pending",
          ""
        ]
      ]
    },
    "LegStatus": {
      "type": "enum",
      "type_mapping": [
        [
          "PendingTokenLock",
          ""
        ],
        [
          "ExecutionPending",
          ""
        ],
        [
          "ExecutionToBeSkipped",
          "(AccountId, u64)"
        ]
      ]
    },
    "AffirmationStatus": {
      "type": "enum",
      "type_mapping": [
        [
          "Unknown",
          ""
        ],
        [
          "Pending",
          ""
        ],
        [
          "Affirmed",
          ""
        ],
        [
          "Rejected",
          ""
        ]
      ]
    },
    "SettlementType": {
      "type": "enum",
      "type_mapping": [
        [
          "SettleOnAffirmation",
          ""
        ],
        [
          "SettleOnBlock",
          "BlockNumber"
        ]
      ]
    },
    "Instruction": {
      "type": "struct",
      "type_mapping": [
        [
          "instruction_id",
          "u64"
        ],
        [
          "venue_id",
          "u64"
        ],
        [
          "status",
          "InstructionStatus"
        ],
        [
          "settlement_type",
          "SettlementType"
        ],
        [
          "created_at",
          "Option<Moment>"
        ],
        [
          "trade_date",
          "Option<Moment>"
        ],
        [
          "value_date",
          "Option<Moment>"
        ]
      ]
    },
    "Leg": {
      "type": "struct",
      "type_mapping": [
        [
          "from",
          "PortfolioId"
        ],
        [
          "to",
          "PortfolioId"
        ],
        [
          "asset",
          "Ticker"
        ],
        [
          "amount",
          "Balance"
        ]
      ]
    },
    "Venue": {
      "type": "struct",
      "type_mapping": [
        [
          "creator",
          "IdentityId"
        ],
        [
          "instructions",
          "Vec<u64>"
        ],
        [
          "details",
          "VenueDetails"
        ],
        [
          "venue_type",
          "VenueType"
        ]
      ]
    },
    "Receipt": {
      "type": "struct",
      "type_mapping": [
        [
          "receipt_uid",
          "u64"
        ],
        [
          "from",
          "PortfolioId"
        ],
        [
          "to",
          "PortfolioId"
        ],
        [
          "asset",
          "Ticker"
        ],
        [
          "amount",
          "Balance"
        ]
      ]
    },
    "ReceiptMetadata": "Text",
    "ReceiptDetails": {
      "type": "struct",
      "type_mapping": [
        [
          "receipt_uid",
          "u64"
        ],
        [
          "leg_id",
          "u64"
        ],
        [
          "signer",
          "AccountId"
        ],
        [
          "signature",
          "OffChainSignature"
        ],
        [
          "metadata",
          "ReceiptMetadata"
        ]
      ]
    },
    "UniqueCall": {
      "type": "struct",
      "type_mapping": [
        [
          "nonce",
          "u64"
        ],
        [
          "call",
          "Call"
        ]
      ]
    },
    "MovePortfolioItem": {
      "type": "struct",
      "type_mapping": [
        [
          "ticker",
          "Ticker"
        ],
        [
          "amount",
          "Balance"
        ]
      ]
    },
    "WeightToFeeCoefficient": {
      "type": "struct",
      "type_mapping": [
        [
          "coeffInteger",
          "Balance"
        ],
        [
          "coeffFrac",
          "Perbill"
        ],
        [
          "negative",
          "bool"
        ],
        [
          "degree",
          "u8"
        ]
      ]
    },
    "TargetIdentity": {
      "type": "enum",
      "type_mapping": [
        [
          "PrimaryIssuanceAgent",
          ""
        ],
        [
          "Specific",
          "IdentityId"
        ]
      ]
    },
    "FundraiserName": "Text",
    "FundraiserStatus": {
      "type": "enum",
      "value_list": [
        "Live",
        "Frozen",
        "Closed",
        "ClosedEarly"
      ]
    },
    "FundraiserTier": {
      "type": "struct",
      "type_mapping": [
        [
          "total",
          "Balance"
        ],
        [
          "price",
          "Balance"
        ],
        [
          "remaining",
          "Balance"
        ]
      ]
    },
    "Fundraiser": {
      "type": "struct",
      "type_mapping": [
        [
          "creator",
          "IdentityId"
        ],
        [
          "offering_portfolio",
          "PortfolioId"
        ],
        [
          "offering_asset",
          "Ticker"
        ],
        [
          "raising_portfolio",
          "PortfolioId"
        ],
        [
          "raising_asset",
          "Ticker"
        ],
        [
          "tiers",
          "Vec<FundraiserTier>"
        ],
        [
          "venue_id",
          "u64"
        ],
        [
          "start",
          "Moment"
        ],
        [
          "end",
          "Option<Moment>"
        ],
        [
          "status",
          "FundraiserStatus"
        ],
        [
          "minimum_investment",
          "Balance"
        ]
      ]
    },
    "VenueType": {
      "type": "enum",
      "value_list": [
        "Other",
        "Distribution",
        "Sto",
        "Exchange"
      ]
    },
    "Payload": {
      "type": "struct",
      "type_mapping": [
        [
          "block_number",
          "BlockNumber"
        ],
        [
          "nominators",
          "Vec<AccountId>"
        ],
        [
          "public",
          "H256"
        ]
      ]
    },
    "ExtensionAttributes": {
      "type": "struct",
      "type_mapping": [
        [
          "usage_fee",
          "Balance"
        ],
        [
          "version",
          "MetaVersion"
        ]
      ]
    },
    "Tax": "Permill",
    "TargetIdentities": {
      "type": "struct",
      "type_mapping": [
        [
          "identities",
          "Vec<IdentityId>"
        ],
        [
          "treatment",
          "TargetTreatment"
        ]
      ]
    },
    "TargetTreatment": {
      "type": "enum",
      "value_list": [
        "Include",
        "Exclude"
      ]
    },
    "CAKind": {
      "type": "enum",
      "value_list": [
        "PredictableBenefit",
        "UnpredictableBenefit",
        "IssuerNotice",
        "Reorganization",
        "Other"
      ]
    },
    "CADetails": "Text",
    "CACheckpoint": {
      "type": "enum",
      "type_mapping": [
        [
          "Scheduled",
          "(ScheduleId, u64)"
        ],
        [
          "Existing",
          "CheckpointId"
        ]
      ]
    },
    "RecordDate": {
      "type": "struct",
      "type_mapping": [
        [
          "date",
          "Moment"
        ],
        [
          "checkpoint",
          "CACheckpoint"
        ]
      ]
    },
    "RecordDateSpec": {
      "type": "enum",
      "type_mapping": [
        [
          "Scheduled",
          "Moment"
        ],
        [
          "ExistingSchedule",
          "ScheduleId"
        ],
        [
          "Existing",
          "CheckpointId"
        ]
      ]
    },
    "CorporateAction": {
      "type": "struct",
      "type_mapping": [
        [
          "kind",
          "CAKind"
        ],
        [
          "decl_date",
          "Moment"
        ],
        [
          "record_date",
          "Option<RecordDate>"
        ],
        [
          "details",
          "Text"
        ],
        [
          "targets",
          "TargetIdentities"
        ],
        [
          "default_withholding_tax",
          "Tax"
        ],
        [
          "withholding_tax",
          "Vec<(IdentityId, Tax)>"
        ]
      ]
    },
    "LocalCAId": "u32",
    "CAId": {
      "type": "struct",
      "type_mapping": [
        [
          "ticker",
          "Ticker"
        ],
        [
          "local_id",
          "LocalCAId"
        ]
      ]
    },
    "Distribution": {
      "type": "struct",
      "type_mapping": [
        [
          "from",
          "PortfolioId"
        ],
        [
          "currency",
          "Ticker"
        ],
        [
          "per_share",
          "Balance"
        ],
        [
          "amount",
          "Balance"
        ],
        [
          "remaining",
          "Balance"
        ],
        [
          "reclaimed",
          "bool"
        ],
        [
          "payment_at",
          "Moment"
        ],
        [
          "expires_at",
          "Option<Moment>"
        ]
      ]
    },
    "SlashingSwitch": {
      "type": "enum",
      "value_list": [
        "Validator",
        "ValidatorAndNominator",
        "None"
      ]
    },
    "PriceTier": {
      "type": "struct",
      "type_mapping": [
        [
          "total",
          "Balance"
        ],
        [
          "price",
          "Balance"
        ]
      ]
    },
    "AssetMigrationError": {
      "type": "enum",
      "type_mapping": [
        [
          "AssetDocumentFail",
          "(Ticker, DocumentId)"
        ]
      ]
    },
    "MigrationError": {
      "type": "enum",
      "type_mapping": [
        [
          "DecodeKey",
          "Vec<u8>"
        ],
        [
          "Map",
          "AssetMigrationError"
        ]
      ]
    },
    "PermissionedIdentityPrefs": {
      "type": "struct",
      "type_mapping": [
        [
          "intended_count",
          "u32"
        ],
        [
          "running_count",
          "u32"
        ]
      ]
    },
    "GranularCanTransferResult": {
      "type": "struct",
      "type_mapping": [
        [
          "invalid_granularity",
          "bool"
        ],
        [
          "self_transfer",
          "bool"
        ],
        [
          "invalid_receiver_cdd",
          "bool"
        ],
        [
          "invalid_sender_cdd",
          "bool"
        ],
        [
          "missing_scope_claim",
          "bool"
        ],
        [
          "receiver_custodian_error",
          "bool"
        ],
        [
          "sender_custodian_error",
          "bool"
        ],
        [
          "sender_insufficient_balance",
          "bool"
        ],
        [
          "portfolio_validity_result",
          "PortfolioValidityResult"
        ],
        [
          "asset_frozen",
          "bool"
        ],
        [
          "statistics_result",
          "Vec<TransferManagerResult>"
        ],
        [
          "compliance_result",
          "AssetComplianceResult"
        ],
        [
          "result",
          "bool"
        ]
      ]
    },
    "PortfolioValidityResult": {
      "type": "struct",
      "type_mapping": [
        [
          "receiver_is_same_portfolio",
          "bool"
        ],
        [
          "sender_portfolio_does_not_exist",
          "bool"
        ],
        [
          "receiver_portfolio_does_not_exist",
          "bool"
        ],
        [
          "sender_insufficient_balance",
          "bool"
        ],
        [
          "result",
          "bool"
        ]
      ]
    },
    "TransferManagerResult": {
      "type": "struct",
      "type_mapping": [
        [
          "tm",
          "TransferManager"
        ],
        [
          "result",
          "bool"
        ]
      ]
    }
  }
}
